package com.backends.security.web;



import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.backends.exception.ResourceNotFoundException;
import com.backends.security.entity.Role;
import com.backends.security.repository.RoleRepository;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import java.util.Optional;

@ CrossOrigin ( origins = "http://localhost:4200" )
@ RestController
@ RequestMapping ( "/api" )
public class RoleController {
	@Autowired 	RoleRepository  repository;
	
	 @GetMapping("/roles")
	  public List<Role> getAllRoles() {
	     System.out.println("Get all articles...");
	 
	    List<Role> roles = new ArrayList<>();
	    repository.findAll().forEach(roles::add);
	 
	    return roles;
	  }
	 
	 @GetMapping("/roles/{id}")
		public ResponseEntity<Role> getRoleById(@PathVariable(value = "id") Long Id)
				throws ResourceNotFoundException {
		 Role Role = repository.findById(Id).orElseThrow(() -> new ResourceNotFoundException("Article not found for this id :: " + Id));
			return ResponseEntity.ok().body(Role);
		}
	 
	
	 @PostMapping("/roles")
	 public Role createRole( @RequestBody Role role) {
		 return repository.save(role);
	 }
	 

	 @DeleteMapping("/roles/{id}")
		public Map<String,Boolean>deleteRole(@PathVariable(value="id")Long RoleId)
				throws ResourceNotFoundException {
		 Role Role = repository.findById(RoleId).orElseThrow(() -> new ResourceNotFoundException("Article not found for this id :: " + RoleId));
			repository.delete(Role);
			Map<String,Boolean>response=new HashMap<>();
			response.put("deleted", Boolean.TRUE);
			return response;
		
	}
	 @DeleteMapping("/Roles/delete")
		public ResponseEntity<String>deleteAllRoles(){
			System.out.println("Delete All Roles");
			repository.deleteAll();
			return new ResponseEntity<>("All Role have been deleted!",HttpStatus.OK);
		}

	  @PutMapping("/roles/{id}")
	  public ResponseEntity<Role> updateArticle(@PathVariable("id") long id, @RequestBody Role Role) {
	    System.out.println("Update Role with ID = " + id + "...");
	    Optional<Role> RoleInfo = repository.findById(id);
	    if (RoleInfo.isPresent()) {
	    	Role role = RoleInfo.get();
	           role.setNomRole(Role.getNomRole());
	     
	           role.setUsers(Role.getUsers());
	           
	          
	      return new ResponseEntity<>(repository.save(Role), HttpStatus.OK);
	    } else {
	      return new ResponseEntity<>(HttpStatus.NOT_FOUND);
	    }
	  }

}