package com.backends.security.web;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import java.util.Optional;

import com.pj.iset.exception.ResourceNotFoundException;
import com.pj.iset.model.User;
import com.pj.iset.repository.UserRepository;

@ CrossOrigin ( origins = "http://localhost:4200" )
@ RestController
@ RequestMapping ( "/api" )
public class UserController {
	@Autowired 	UserRepository  repository;
	
	 @GetMapping("/users")
	  public List<User> getAllUsers() {
	     System.out.println("Get all Users...");
	 
	    List<User> users = new ArrayList<>();
	    repository.findAll().forEach(users::add);
	 
	    return users;
	  }
	 
	 @GetMapping("/users/{id}")
		public ResponseEntity<User> getUserById(@PathVariable(value = "id") Long Id)
				throws ResourceNotFoundException {
		 User User = repository.findById(Id).orElseThrow(() -> new ResourceNotFoundException("User not found for this id :: " + Id));
			return ResponseEntity.ok().body(User);
		}
	 
	
	 @PostMapping("/users")
	 public User createUser( @RequestBody User user) {
		 return repository.save(user);
	 }
	 

	 @DeleteMapping("/users/{id}")
		public Map<String,Boolean>deleteUser(@PathVariable(value="id")Long UserId)
				throws ResourceNotFoundException {
		 User User = repository.findById(UserId).orElseThrow(() -> new ResourceNotFoundException("User not found for this id :: " + UserId));
			repository.delete(User);
			Map<String,Boolean>response=new HashMap<>();
			response.put("deleted", Boolean.TRUE);
			return response;
		
	}
	 @DeleteMapping("/Users/delete")
		public ResponseEntity<String>deleteAllUsers(){
			System.out.println("Delete All Users");
			repository.deleteAll();
			return new ResponseEntity<>("All Users have been deleted!",HttpStatus.OK);
		}

	  @PutMapping("/users/{id}")
	  public ResponseEntity<User> updateUser(@PathVariable("id") long id, @RequestBody User User) {
	    System.out.println("Update User with ID = " + id + "...");
	    Optional<User> UserInfo = repository.findById(id);
	    if (UserInfo.isPresent()) {
	    	User user = UserInfo.get();
	    	user.setLogin(User.getLogin());
	    	user.setPassword(User.getPassword())   ; 
	    	user.setEmploye(User.getEmploye());
	    	user.setRoles(User.getRoles());
	    	
	    
	       

	          
	          
	      return new ResponseEntity<>(repository.save(User), HttpStatus.OK);
	    } else {
	      return new ResponseEntity<>(HttpStatus.NOT_FOUND);
	    }
	  }

}
