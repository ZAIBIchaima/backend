package com.pj.iset.web;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;

import org.springframework.web.bind.annotation.RestController;

import com.pj.iset.exception.ResourceNotFoundException;
import com.pj.iset.model.Categorie;
import com.pj.iset.repository.CategorieRepository;

@CrossOrigin(origins = "http://localhost:4200")
@RestController
@RequestMapping("/api")
public class CategorieController {
	@Autowired 	CategorieRepository  repository;
	@GetMapping("/categories")
	  public List<Categorie> getAllArticles() {
	     System.out.println("Get all articles...");
	 
	    List<Categorie> categories = new ArrayList<>();
	    repository.findAll().forEach(categories::add);
	 
	    return categories;
	  }
	@GetMapping("/categories/{id}")
	public ResponseEntity<Categorie> getCategorieById(@PathVariable(value = "id") Long Id)
			throws ResourceNotFoundException {
		Categorie Categorie = repository.findById(Id).orElseThrow(() -> new ResourceNotFoundException("Article not found for this id :: " + Id));
		return ResponseEntity.ok().body(Categorie);
	}
	@PostMapping("/categories")
	 public Categorie createCategorie( @RequestBody Categorie categorie) {
		 return repository.save(categorie);
	 }
	@DeleteMapping("/categories/{id}")
	public Map<String,Boolean>deleteCategorie(@PathVariable(value="id")Long CategorieId)
			throws ResourceNotFoundException {
		Categorie Categorie = repository.findById(CategorieId).orElseThrow(() -> new ResourceNotFoundException("Article not found for this id :: " + CategorieId));
		repository.delete(Categorie);
		Map<String,Boolean>response=new HashMap<>();
		response.put("deleted", Boolean.TRUE);
		return response;
	
}
	@PutMapping("/categories/{id}")
	  public ResponseEntity<Categorie> updateCategorie(@PathVariable("id") long id, @RequestBody Categorie Categorie) {
	    System.out.println("Update categorie with ID = " + id + "...");
	    Optional<Categorie> CategorieInfo = repository.findById(id);
	    if (CategorieInfo.isPresent()) {
	    	Categorie categorie = CategorieInfo.get();
	 
	    	categorie.setLibCat(Categorie.getLibCat());
	 
	      return new ResponseEntity<>(repository.save(Categorie), HttpStatus.OK);
	    } else {
	      return new ResponseEntity<>(HttpStatus.NOT_FOUND);
	    }
	  }
	@DeleteMapping("/Categories/delete")
	public ResponseEntity<String>deleteAllCategories(){
		System.out.println("Delete All Categories");
		repository.deleteAll();
		return new ResponseEntity<>("All Categories have been deleted!",HttpStatus.OK);
	}

}