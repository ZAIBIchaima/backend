package com.backends.commun.web;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import java.util.Optional;

import com.backends.exception.ResourceNotFoundException;
import com.backends.commun.entity.*;
import com.backends.commun.repository.*;

@ CrossOrigin ( origins = "http://localhost:4200" )
@ RestController
@ RequestMapping ( "/api" )
public class EmployeController {
	@Autowired 	EmployeRepository  repository;
	
	 @GetMapping("/employes")
	  public List<Employe> getAllEmployes() {
	     System.out.println("Get all employes...");
	 
	    List<Employe> employes = new ArrayList<>();
	    repository.findAll().forEach(employes::add);
	 
	    return employes;
	  }
	 
	 @GetMapping("/employes/{id}")
		public ResponseEntity<Employe> getEmployeById(@PathVariable(value = "id") Long Id)
				throws ResourceNotFoundException {
		 Employe Employe = repository.findById(Id).orElseThrow(() -> new ResourceNotFoundException("Employe not found for this id :: " + Id));
			return ResponseEntity.ok().body(Employe);
		}
	 
	
	 @PostMapping("/employes")
	 public Employe createEmploye( @RequestBody Employe employe) {
		 return repository.save(employe);
	 }
	 

	 @DeleteMapping("/employes/{id}")
		public Map<String,Boolean>deleteEmploye(@PathVariable(value="id")Long EmployeId)
				throws ResourceNotFoundException {
		 Employe Employe = repository.findById(EmployeId).orElseThrow(() -> new ResourceNotFoundException("Employe not found for this id :: " +EmployeId));
			repository.delete(Employe);
			Map<String,Boolean>response=new HashMap<>();
			response.put("deleted", Boolean.TRUE);
			return response;
		
	}
	 @DeleteMapping("/Employes/delete")
		public ResponseEntity<String>deleteAllEmployes(){
			System.out.println("Delete All Employes");
			repository.deleteAll();
			return new ResponseEntity<>("All Employes have been deleted!",HttpStatus.OK);
		}

	  @PutMapping("/employes/{id}")
	  public ResponseEntity<Employe> updateEmploye(@PathVariable("id") long id, @RequestBody Employe Employe) {
	    System.out.println("Update Employe with ID = " + id + "...");
	    Optional<Employe> EmployeInfo = repository.findById(id);
	    if (EmployeInfo.isPresent()) {
	    	Employe employe = EmployeInfo.get();
	    	employe.setNom(Employe.getNom());
	    	employe.setPrenom(Employe.getPrenom())   ; 
	    	employe.setMail(Employe.getMail())   ; 
	    	employe.setIdDep(Employe.getIdDep())   ; 
	    	
	    	
	    	
	    	employe.setDateEmbauche(Employe.getDateEmbauche());  
	      return new ResponseEntity<>(repository.save(Employe), HttpStatus.OK);
	    } else {
	      return new ResponseEntity<>(HttpStatus.NOT_FOUND);
	    }
	  }

}
